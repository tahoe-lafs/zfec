cabal-version:      3.4
name:               fec
version:            0.2.0
license:            GPL-2.0-or-later
license-file:       README.rst
author:             Adam Langley <agl@imperialviolet.org>
maintainer:         Adam Langley <agl@imperialviolet.org>
description:
  This code, based on zfec by Zooko, based on code by Luigi
  Rizzo implements an erasure code, or forward error
  correction code. The most widely known example of an erasure
  code is the RAID-5 algorithm which makes it so that in the
  event of the loss of any one hard drive, the stored data can
  be completely recovered.  The algorithm in the zfec package
  has a similar effect, but instead of recovering from the loss
  of only a single element, it can be parameterized to choose in
  advance the number of elements whose loss it can tolerate.

build-type:         Simple
homepage:           https://github.com/tahoe-lafs/zfec
synopsis:           Forward error correction of ByteStrings
category:           Codec
stability:          provisional
tested-with:        GHC ==6.8.2
extra-source-files:
  COPYING.GPL
  COPYING.TGPPL.rst
  zfec/fec.h

library
  build-depends:
    , base
    , bytestring  >=0.9

  exposed-modules:    Codec.FEC
  default-extensions: ForeignFunctionInterface
  hs-source-dirs:     haskell

  -- Try to keep the warning options here in sync with those in the
  -- test-suite.
  ghc-options:
    -Wall -Weverything -Wno-implicit-prelude
    -Wno-prepositive-qualified-module -Wno-all-missed-specialisations
    -Wno-missing-safe-haskell-mode -Wno-missing-deriving-strategies

  c-sources:          zfec/fec.c
  cc-options:         -std=c99
  include-dirs:       zfec

test-suite tests
  type:             exitcode-stdio-1.0
  main-is:          FECTest.hs
  other-modules:
  hs-source-dirs:   haskell/test

  -- Turn on a lot of warnings.  Some warnings we turn off:
  --
  -- * implicit-prelude: We use the implicit prelude a lot for now.
  --
  -- * prepositive-qualified-module: prepositive qualified is really common
  --   and I don't want to reformat everything right now.
  --
  -- * all-missed-specialisations: I don't really understand the implications
  --   of messing with INLINABLE.
  --
  -- * missing-safe-haskell-mode: Yea, well, the FEC implementation is
  --   actually unsafe, so.
  --
  -- * missing-deriving-strategies: The default deriving strategy is
  --   unsurprising.
  ghc-options:
    -Wall -Weverything -threaded -rtsopts -with-rtsopts=-N
    -Wno-implicit-prelude -Wno-prepositive-qualified-module
    -Wno-all-missed-specialisations -Wno-missing-safe-haskell-mode
    -Wno-missing-deriving-strategies

  build-depends:
    , base
    , bytestring
    , fec
    , hspec
    , QuickCheck
    , quickcheck-instances
    , random

  default-language: Haskell2010
